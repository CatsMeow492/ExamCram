name: Deploy to ECR

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**'  # Only run when there are changes in the backend directory

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/examcram/backend
          docker build -t $REPOSITORY_URI:$IMAGE_TAG -f ./backend/Dockerfile ./backend
          docker push $REPOSITORY_URI:$IMAGE_TAG
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Register new task definition
        id: register-task-def
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://ecs-task-definition.json
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster examcram-cluster \
            --service examcram-backend-service \
            --force-new-deployment \
            --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:500532294210:targetgroup/examcram/47199c37d6535c14,containerName=examcram-backend,containerPort=8080 \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-c1cd388d],securityGroups=[sg-6dac8372],assignPublicIp=ENABLED}"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}